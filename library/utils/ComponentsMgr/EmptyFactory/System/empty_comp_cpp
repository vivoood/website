/*
 * Author: Nikolay Nedelchev
 *
 * Copyright (c) 2016 EGT Ltd.
 * All rights reserved
 *
 * More information at: http://www.egt-bg.com
 */



// Put your includes above this line
///////////////////////////////////////////////////////////////////
/// !!! DO NOT INCLUDE ANY FILES AFTER THIS LINE !!!
#include "$$CompName$$Component.h"
///////////////////////////////////////////////////////////////////////////
using namespace COMPONENT_FACTORY_NAMESPACE;
#include "$$RootDir$$System/push_warning_level.h"
#include "$$RootDir$$System/stop_unused_var_warning.h"
IMPLEMENT_COMPONENT_COMMON_METHODS($$COMPNAME$$_COMP_VALUES_ITERATOR_$$RANDOM$$, $$CompName$$, FACTORY_NAMESPACE_STRING)
#include "$$RootDir$$System/pop_warning_level.h"
/// !!! DO NOT INCLUDE ANY FILES HERE !!!
///////////////////////////////////////////////////////////////////////////
bool $$CompName$$Component::Load(const pugi::xml_node& xmlNode)
{
    $$COMPNAME$$_COMP_VALUES_ITERATOR_$$RANDOM$$(COMP_IMPLEMENT_REQ_LOADER, COMP_IMPLEMENT_NOT_REQ_LOADER);
    return true;
}

///////////////////////////////////////////////////////////////////////////
bool $$CompName$$Component::Load(egt::iUniStream& inputStream)
{
    COMP_IMPLEMENT_BIN_LOAD($$COMPNAME$$_COMP_VALUES_ITERATOR_$$RANDOM$$, $$CompName$$);
    return true;
}

///////////////////////////////////////////////////////////////////////////
bool $$CompName$$Component::Serialize(pugi::xml_node& node) const
{
    $$COMPNAME$$_COMP_VALUES_ITERATOR_$$RANDOM$$(COMP_IMPLEMENT_REQ_WRITER, COMP_IMPLEMENT_NOT_REQ_WRITER);
    return true;
}

///////////////////////////////////////////////////////////////////////////
bool $$CompName$$Component::Serialize(egt::oUniStream& outStream) const
{
    COMP_IMPLEMENT_BIN_SERIALIZE($$COMPNAME$$_COMP_VALUES_ITERATOR_$$RANDOM$$, $$CompName$$);
    return true;
}

///////////////////////////////////////////////////////////////////////////
$$CompName$$Component::$$CompName$$Component()
    : COMP_IMPLEMENT_CONSTRUCTOR_VALUES_INIT($$COMPNAME$$_COMP_VALUES_ITERATOR_$$RANDOM$$)
{

}

///////////////////////////////////////////////////////////////////////////
$$CompName$$Component::~$$CompName$$Component()
{

}

///////////////////////////////////////////////////////////////////////////
bool
$$CompName$$Component::MergeValidator(
    const $$CompName$$Component&,    // lowPriorityComp,
    const $$CompName$$Component&,    // highPriorityComp,
    $$CompName$$Component&)          // mergedComp)
{
    return true;
}

